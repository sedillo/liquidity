data "archive_file" "rrp_zip" {
  type        = "zip"
  source_file = "rrp.py"
  output_path = "rrp_payload.zip"
}

resource "aws_lambda_function" "rrp" {
  filename      = data.archive_file.rrp_zip.output_path
  function_name = "rrp"
  role          = aws_iam_role.iam_for_lambda.arn
  handler       = "lambda_function.lambda_handler"

  source_code_hash = data.archive_file.rrp_zip.output_base64sha256

  runtime = "python3.8"

  environment {
    environment {
      variables = {
        DB_HOST     = aws_rds_cluster.main.endpoint
        DB_USER     = "foo"
        DB_PASSWORD = data.aws_secretsmanager_secret_version.db_password.secret_string
        DB_NAME     = "mydb"
      }
    }
  }
}

resource "aws_iam_role" "iam_for_lambda" {
  name = "iam_for_lambda"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Principal = {
          Service = "lambda.amazonaws.com"
        },
        Effect = "Allow",
      },
    ]
  })
}

resource "aws_iam_role_policy_attachment" "attach_to_lambda_exec_policy" {
  role       = aws_iam_role.iam_for_lambda.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

resource "aws_lambda_permission" "allow_cloudwatch" {
  statement_id  = "AllowExecutionFromCloudWatch"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.test_lambda.function_name
  principal     = "events.amazonaws.com"
}
 
